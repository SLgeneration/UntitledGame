extends MainChar

class_name LirikYaki

const trail_scene = preload("res://src/Helpers/Trail.tscn")
const smoke_scene = preload("res://src/Actors/MainChar/SmokeParticles.tscn")
const hadouken_scene = preload("res://src/Actors/MainChar/HadoukenBlast.tscn")
const ghost_scene = preload("res://src/Helpers/Ghost.tscn")
const spawner = preload("res://src/Helpers/Spawning/Spawner.tscn")
const dropped_item = preload("res://src/InventoryItems/DroppedItemBase.tscn")
const footstep = preload("res://assets/audio/footsteps_sfx.wav")
const woosh = preload("res://assets/audio/HitAudio/miss_sfx.wav")
const deathSound = preload("res://assets/audio/main_char_death_sfx.wav")


const _JUMP_EVENT = "Jump"
const _DASH_EVENT = "dodge"
const _DODGE_SPEED = 2000
const _DODGE_ACCELERATION = .9
const _LEFT_FACING_SCALE = -1.0
const _RIGHT_FACING_SCALE = 1.0
const _FOOTSTEP_PARTICLE_POSITION_OFFSET = -6
const _MAX_SUPER_CHARGES = 3
const _MIN_SUPER_CHARGES = 0
const STARTING_SUPER_CHARGES = 1
const NORMAL_HEALTH_VALUE = 10
const NORMAL_DAMAGE_VALUE = 1
const INFINITE_HEALTH_VALUE = 20000
const INFINITE_DAMAGE_VALUE = 2000

var InventoryItem : Node2D
var Coins = 0
var _beingHurt: bool = false
var _canTakeDamage: bool = false
var _isDodging = false
var _canDodge = true
var _directionFacing: Vector2 = Vector2.ZERO
var _dodgeDirection: Vector2 = Vector2.ZERO
var _trail = []
var _invincibilityTimer: Timer = Timer.new()
var _defenseUpTimer: Timer = Timer.new()
var _damageUpTimer: Timer = Timer.new()
var _attackResetTimer: Timer = Timer.new()
var _takeDamageModifier = 1.0
var _giveDamageModifier = 1.0
var _damage = NORMAL_DAMAGE_VALUE
var _hitDoneTimer: Timer = Timer.new()
var _hitAnimationTime = 1
var _currentSuperCharges = STARTING_SUPER_CHARGES
var _lastHadoukenDamagePercentage: float = 0.0
var _setting: Settings = Settings.new()

# debug settings
var isInfiniteHealth = false
var isInfiniteDamage = false

onready var _attackManager: AttackManager
onready var sprite: Sprite = $KinematicSprite/Sprite
onready var shadow: Sprite = $Shadow
onready var rightHitBox: CollisionShape2D = $attack/sideSwipeRight
onready var hadoukenSpawn: Position2D = $HadoukenSpawn
onready var ghostIntervalTimer: Timer = $GhostIntervalTimer
onready var ghostDurationTimer: Timer = $GhostDurationTImer
onready var dashDurationTimer: Timer = $DashDurationTimer
onready var dashCooldownTimer: Timer = $DashCooldownTimer
onready var animationTree: AnimationTree = $AnimationTree
onready var chargeBar: TextureProgress = $ChargeBar


func _init():
	add_to_group("Player")
	load_character_save(LevelGlobals.GetPlayerSaveData())

func load_character_save(player_data):
	if(player_data != null && !player_data.empty()):
		Coins = player_data["coins"];
		if(player_data.has("health")):
			_health = player_data["health"]
		else:
			_health = _maxHealth;

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	._ready()
	_attackManager = AttackManager.new(_attackResetTimer,
		chargeBar, animationTree)


func _check_for_events() -> bool:
	if Input.is_action_just_released(AttackManager.SPECIAL_ATTACK_EVENT) and _attackManager.isChargingSpecial:
		_summonHadouken()
		return true
	elif checkForEvent(AttackManager.SPECIAL_ATTACK_EVENT):
		checkForSuperCharges()
		return true
	elif checkForEvent(AttackManager.ATTACK1_EVENT):
		_attackManager.doSideSwipeAttack(get_tree().get_current_scene())
		return true
	elif checkForEvent(AttackManager.ATTACK2_EVENT):
		_attackManager.doSideSwipeKick(get_tree().get_current_scene())
		return true
	elif checkForEvent(_DASH_EVENT):
		_start_dash()
		return false
	else:
		return false
<<<<<<< HEAD
=======


func _summonHadouken():
	_lastHadoukenDamagePercentage = _attackManager.getHadoukenPercentage()
	_attackManager.releaseSpecial()


func checkForEvent(event_name: String) -> bool:
	return Input.is_action_just_pressed(event_name) or Input.is_action_pressed(event_name)


func _finishedAttack() -> void:
	print("attack finished")
	_attackManager.isAttacking = false


func checkIfWePlayWooshSFX():
	if !_attackManager.didHitEnemy:
		SoundPlayer.playSound(get_tree().get_current_scene(), woosh, -4)


# callback function for when hurt animation is done
func _hurtAnimationFinished() -> void:
	_beingHurt = false


func _on_attack_area_entered(area: Area2D) -> void:
	if area.is_in_group("hurtbox") && area.get_parent() != null && area.get_parent().has_method("take_damage"):
		print("direction of hit: " + String(_directionFacing.x))
		_attackManager.didHitEnemy = true
		area.get_parent().show_hit_marker(_attackManager.isLastAttackAKick)
		_on_enemy_hit()
		var finalDam = ceil(_damage * _giveDamageModifier)
		if isInfiniteDamage:
			finalDam = INFINITE_DAMAGE_VALUE
		area.get_parent().take_damage(finalDam, _directionFacing, _attackManager.damageForce)


func _on_enemy_hit():
	emit_signal("player_hit_enemy")
	_attackManager.playHitSounds(get_tree().get_current_scene())

func playDeathRattle():
	SoundPlayer.playSound(get_tree().get_current_scene(), deathSound, -4)


func sendPlayerDeadSignal():
	#restarting game, instead of sending signal
	get_tree().reload_current_scene()


# Called in Animation Player from animation Hadouken
func summon_hadouken_blast():
	var instance = hadouken_scene.instance()
	instance.calculateDamage(_lastHadoukenDamagePercentage)
	instance.set_direction(_directionFacing)
	instance.global_position = hadoukenSpawn.global_position
	get_parent().add_child(instance)


func _start_dash():
	if _canDodge:
		_isDodging = true
		_canDodge = false
		emit_signal("player_dodge")
		ghostIntervalTimer.start()
		ghostDurationTimer.start()
		dashCooldownTimer.start()
		dashDurationTimer.start()


func _cancel_dash():
	_isDodging = false
	ghostIntervalTimer.stop()
	ghostDurationTimer.stop()
	dashDurationTimer.stop()
	_velocity = Vector2.ZERO


func getDodgeCooldownTime() -> float:
	return dashCooldownTimer.wait_time


func _on_ghostIntervalTimer_timeout():
	var this_ghost: Ghost = ghost_scene.instance()
	get_parent().add_child(this_ghost)
	this_ghost.set_paramaters_for_ghost(sprite, self.global_position)


func _on_DashDurationTimer_timeout():
	_isDodging = false


func _on_DashCooldownTimer_timeout():
	_canDodge = true


func _on_GhostDurationTImer_timeout():
	ghostIntervalTimer.stop()


func _on_ChargeIntervalTimer_timeout():
	_attackManager.increaseChargeBar()


func _getDebugSettings():
	var gameSettings = Settings.load_game_settings()
	isInfiniteDamage = gameSettings.infiniteDamage
	isInfiniteHealth = gameSettings.infiniteHealth
>>>>>>> main
